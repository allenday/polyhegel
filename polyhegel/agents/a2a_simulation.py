"""
A2A-based hierarchical simulation support for polyhegel

This module provides functions to run hierarchical strategic simulations
using A2A agent coordination instead of the legacy AgentCoordinator.
"""

import logging
from typing import List, Optional

from ..models import StrategyChain
from .base import AgentContext
from .a2a_coordinator import A2ACoordinator, A2AAgentEndpoint
from ..strategic_techniques import CLMMandate

logger = logging.getLogger(__name__)


async def generate_hierarchical_strategies_a2a(
    strategic_challenge: str,
    context: Optional[AgentContext] = None,
    leader_url: str = "http://localhost:8001",
    follower_urls: Optional[dict] = None,
    max_themes: int = 5
) -> List[StrategyChain]:
    """
    Generate strategies using A2A hierarchical agent coordination
    
    Args:
        strategic_challenge: Strategic challenge description
        context: Optional agent context
        leader_url: URL of leader agent A2A server
        follower_urls: Dict mapping specializations to URLs
        max_themes: Maximum themes to generate
        
    Returns:
        List of StrategyChain objects generated by A2A agents
    """
    if follower_urls is None:
        follower_urls = {
            "resource": "http://localhost:8002/resource",
            "security": "http://localhost:8002/security", 
            "value": "http://localhost:8002/value",
            "general": "http://localhost:8002/general"
        }
    
    strategy_chains = []
    
    async with A2ACoordinator() as coordinator:
        try:
            # Register leader agent
            leader_endpoint = A2AAgentEndpoint(
                agent_id="leader",
                base_url=leader_url,
                capabilities=["generate_strategic_themes"],
                description="Strategic theme generation leader agent"
            )
            
            leader_registered = await coordinator.register_agent_endpoint(leader_endpoint)
            if not leader_registered:
                raise ValueError(f"Failed to register leader agent at {leader_url}")
            
            # Register follower agents
            follower_mapping = {
                "resource": CLMMandate.RESOURCE_ACQUISITION,
                "security": CLMMandate.STRATEGIC_SECURITY,
                "value": CLMMandate.VALUE_CATALYSIS,
                "general": None
            }
            
            for spec_key, url in follower_urls.items():
                specialization = follower_mapping.get(spec_key)
                
                follower_endpoint = A2AAgentEndpoint(
                    agent_id=f"follower_{spec_key}",
                    base_url=url,
                    capabilities=["develop_detailed_strategy"],
                    specialization=specialization,
                    description=f"Strategy development follower ({spec_key})"
                )
                
                follower_registered = await coordinator.register_agent_endpoint(follower_endpoint)
                if not follower_registered:
                    logger.warning(f"Failed to register follower {spec_key} at {url}")
            
            # Run hierarchical coordination
            logger.info("Starting A2A hierarchical strategy generation...")
            strategies = await coordinator.coordinate_hierarchical_generation(
                strategic_challenge=strategic_challenge,
                context=context,
                leader_agent_id="leader",
                max_themes=max_themes
            )
            
            # Convert to StrategyChain objects
            for i, strategy in enumerate(strategies):
                chain = StrategyChain(
                    strategy=strategy,
                    source_sample=i,
                    temperature=0.7  # Default for hierarchical mode
                )
                strategy_chains.append(chain)
            
            logger.info(f"Generated {len(strategy_chains)} strategy chains via A2A coordination")
            
            # Log coordination summary
            summary = coordinator.get_coordination_summary()
            logger.info(f"A2A coordination summary: {summary}")
            
            return strategy_chains
            
        except Exception as e:
            logger.error(f"A2A hierarchical generation failed: {e}")
            raise


def get_default_a2a_endpoints() -> dict:
    """Get default A2A agent endpoint URLs"""
    return {
        "leader": "http://localhost:8001",
        "follower_urls": {
            "resource": "http://localhost:8002/resource",
            "security": "http://localhost:8002/security",
            "value": "http://localhost:8002/value", 
            "general": "http://localhost:8002/general"
        }
    }


async def validate_a2a_endpoints(endpoints: dict) -> dict:
    """
    Validate A2A agent endpoints are reachable
    
    Args:
        endpoints: Dict with leader and follower_urls
        
    Returns:
        Dict with validation results
    """
    import httpx
    
    results = {
        "leader": {"url": endpoints["leader"], "reachable": False, "error": None},
        "followers": {}
    }
    
    async with httpx.AsyncClient() as client:
        # Test leader endpoint
        try:
            response = await client.get(f"{endpoints['leader']}/.well-known/agent.json")
            results["leader"]["reachable"] = response.status_code == 200
            if response.status_code != 200:
                results["leader"]["error"] = f"HTTP {response.status_code}"
        except Exception as e:
            results["leader"]["error"] = str(e)
        
        # Test follower endpoints
        for spec, url in endpoints["follower_urls"].items():
            results["followers"][spec] = {"url": url, "reachable": False, "error": None}
            
            try:
                response = await client.get(f"{url}/.well-known/agent.json")
                results["followers"][spec]["reachable"] = response.status_code == 200
                if response.status_code != 200:
                    results["followers"][spec]["error"] = f"HTTP {response.status_code}"
            except Exception as e:
                results["followers"][spec]["error"] = str(e)
    
    return results