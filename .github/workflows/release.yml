name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

env:
  PYTHONPATH: ${{ github.workspace }}

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Determine version and prerelease status
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
          IS_PRERELEASE="${{ inputs.prerelease }}"
        else
          # Extract from GitHub release
          VERSION="${{ github.event.release.tag_name }}"
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! echo "$VERSION" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$"; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
        echo "‚úÖ Version format is valid: $VERSION"
    
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        echo "Updated pyproject.toml version to $VERSION"
    
    - name: Run full test suite
      run: |
        make ci-setup ci-deps
        make lint typecheck test-no-llm
    
    - name: Build package
      run: |
        make build
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import polyhegel; print(f'Polyhegel {polyhegel.__version__} installed successfully')"

  create-github-release:
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event_name == 'workflow_dispatch'
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Create changelog from recent commits
        echo "## What's Changed in v$VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since $LAST_TAG:" >> CHANGELOG.md
          git log --oneline "$LAST_TAG"..HEAD --pretty=format:"- %s" >> CHANGELOG.md
        else
          echo "### Recent changes:" >> CHANGELOG.md
          git log --oneline -10 --pretty=format:"- %s" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$VERSION" >> CHANGELOG.md
        
        cat CHANGELOG.md
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        release_name: Release v${{ needs.validate-release.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always() && needs.validate-release.result == 'success'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
    
    - name: Build package
      run: |
        python -m build
        
    - name: Verify package
      run: |
        python -m twine check dist/*
        
    - name: Upload release assets to GitHub
      if: needs.create-github-release.result == 'success'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-github-release.outputs.upload_url }}
        asset_path: dist/polyhegel-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
        asset_name: polyhegel-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip
    
    - name: Upload source distribution to GitHub
      if: needs.create-github-release.result == 'success'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-github-release.outputs.upload_url }}
        asset_path: dist/polyhegel-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_name: polyhegel-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    # Uncomment when ready to publish to PyPI
    # - name: Publish to PyPI
    #   if: ${{ needs.validate-release.outputs.is_prerelease == 'false' }}
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: ${{ secrets.PYPI_API_TOKEN }}
    
    # Uncomment for TestPyPI publishing during development
    # - name: Publish to TestPyPI
    #   if: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     repository-url: https://test.pypi.org/legacy/
    #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    if: always() && needs.validate-release.result == 'success'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Build documentation
      run: make docs
    
    - name: Deploy documentation to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        cname: polyhegel.postfiat.org  # Optional: remove if no custom domain

  notify-completion:
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release, build-and-publish, deploy-docs] 
    if: always()
    steps:
    - name: Release Summary
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
        
        echo "## üöÄ Release v$VERSION Summary"
        echo ""
        echo "**Version:** $VERSION"
        echo "**Pre-release:** $IS_PRERELEASE"
        echo "**Validation:** ${{ needs.validate-release.result }}"
        echo "**GitHub Release:** ${{ needs.create-github-release.result }}"
        echo "**Build & Publish:** ${{ needs.build-and-publish.result }}"
        echo "**Documentation:** ${{ needs.deploy-docs.result }}"
        echo ""
        
        if [ "${{ needs.validate-release.result }}" = "success" ] && \
           [ "${{ needs.build-and-publish.result }}" = "success" ]; then
          echo "‚úÖ Release completed successfully!"
          echo "- GitHub release created with assets"
          echo "- Documentation deployed"
          echo "- Package built and validated"
        else
          echo "‚ùå Release failed. Check job logs for details."
        fi