name: Build Documentation

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to GitHub Pages'
        required: false
        default: false
        type: boolean
  push:
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'polyhegel/**/*.py'
    branches:
      - dev
      - main

env:
  PYTHONPATH: ${{ github.workspace }}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Cache MkDocs build
      uses: actions/cache@v4
      with:
        path: |
          site/
          docs/reference/
        key: mkdocs-${{ github.sha }}
        restore-keys: |
          mkdocs-
    
    - name: Validate documentation structure
      run: make docs-validate
      
    - name: Check for broken links
      run: make docs-check-links
      continue-on-error: true
    
    - name: Build documentation
      run: make docs
      
    - name: Generate documentation summary
      run: make docs-summary
    
    - name: Setup Pages
      if: ${{ github.ref == 'refs/heads/main' || inputs.deploy == true }}
      uses: actions/configure-pages@v5

    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation-site
        path: site/
        retention-days: 30
        
    - name: Upload Pages artifact
      if: ${{ github.ref == 'refs/heads/main' || inputs.deploy == true }}
      uses: actions/upload-pages-artifact@v3
      with:
        path: site/
    
    - name: Deploy to GitHub Pages
      if: ${{ github.ref == 'refs/heads/main' || inputs.deploy == true }}
      uses: actions/deploy-pages@v4

  test-docs:
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
    - name: Download docs artifact
      uses: actions/download-artifact@v4
      with:
        name: documentation-site
        path: site/
    
    - name: Debug artifact contents
      run: |
        echo "=== Artifact contents ==="
        find site/ -type f -name "*.html" | head -20
        echo "=== Getting started directory ==="
        ls -la site/getting-started/ || echo "getting-started directory not found"
        echo "=========================="
    
    - name: Validate built documentation
      run: |
        echo "üîç Testing documentation build structure..."
        
        # Essential pages
        test -f site/index.html || (echo "‚ùå Missing index.html" && exit 1)
        test -d site/reference || (echo "‚ùå Missing API reference directory" && exit 1)
        test -f site/getting-started/installation.html || (echo "‚ùå Missing installation guide" && exit 1)
        test -f site/getting-started/quickstart.html || (echo "‚ùå Missing quickstart guide" && exit 1)
        
        # API reference
        test -f site/reference/index.html || (echo "‚ùå Missing API reference index" && exit 1)
        
        # Count pages for reporting
        html_count=$(find site/ -name "*.html" | wc -l)
        echo "üìä Generated $html_count HTML pages"
        
        # Basic search functionality
        test -f site/search/search_index.json || (echo "‚ö†Ô∏è  Search index not found" && exit 0)
        
        echo "‚úÖ Documentation structure validated successfully"
    
    - name: Check for build issues
      run: |
        echo "üîç Checking for common documentation issues..."
        
        # Check for error indicators in HTML
        error_count=0
        if grep -r "404\|Not Found\|ERROR" site/ --include="*.html" --quiet; then
          echo "‚ö†Ô∏è  Found potential error messages in documentation"
          error_count=$((error_count + 1))
        fi
        
        # Check for missing mkdocstrings content
        if grep -r "No module named" site/ --include="*.html" --quiet; then
          echo "‚ö†Ô∏è  Found missing module imports"
          error_count=$((error_count + 1))
        fi
        
        # Report results
        if [ $error_count -eq 0 ]; then
          echo "‚úÖ No obvious issues found in documentation"
        else
          echo "‚ö†Ô∏è  Found $error_count potential issues (non-blocking)"
        fi